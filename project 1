import zipfile
from zipfile import ZipFile
import PIL
from PIL import Image, ImageDraw
import pytesseract
import cv2 as cv
import numpy as np

# loading the face detection classifier
face_cascade = cv.CascadeClassifier(r"C:\Users\Hari Prasad\Downloads\py3\readonly\haarcascade_frontalface_default.xml")


#loading tesseract ocr
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract"
#Using Hint-2
#let us put all images,face and texts into a dictionary
gDict={}
#Unziping and adding full img to dict
with ZipFile(r"C:\Users\Hari Prasad\Downloads\py3\readonly\images.zip",'r') as zfs:
    for simg in zfs.infolist():
        with zfs.open(simg) as ssimg:
            image = Image.open(ssimg).convert('RGB')
            gDict[simg.filename]= {'fImg': image}          
#create an empty list to all files in dictionary for adding the cropped faces
for file in gDict.keys():
    gDict[file]['faces']=[]
    
#adding cropped faces to dictionary
for fname in gDict.keys():
    arr_img= np.array(gDict[fname]['fImg'])
    grey= cv.cvtColor(arr_img,cv.COLOR_BGR2GRAY)
    face= face_cascade.detectMultiScale(grey,1.3,5)
    #(1.3,5) gives them perfectly
    pil_img=Image.fromarray(grey,mode="L")
    drawing=ImageDraw.Draw(pil_img)
    for x,y,w,h in face:
        cimg=gDict[fname]['fImg'].crop((x,y,x+w,y+h))
        gDict[fname]['faces'].append(cimg)
    
                       

#adding texts for each image in dict
for fname in gDict.keys():
    txt=pytesseract.image_to_string(gDict[fname]['fImg'])
    gDict[fname]['texts']=txt   
#All faces and texts are now in the appropriate keys in the dictionary
#creating a thumbnail 
for fname in gDict.keys():
    for faces in gDict[fname]['faces']:
        faces.thumbnail((100,100),PIL.Image.ANTIALIAS)
#let us search through the dictionary for the keyword and display the results
def search(kwrd):
    for fname in gDict.keys():  
        if kwrd in gDict[fname]['texts']:
            print("Results found in file {0}".format(fname))
            if len(gDict[fname]['faces']) == 0:
                print("But there were no faces in that file!")
            else:
#create contact_sheet and display it
                first_image=gDict['a-0.png']['faces'][0]
                contact_sheet = PIL.Image.new(first_image.mode, (first_image.width*5, first_image.height * 2))
                x = 0
                y = 0

                for image in gDict[fname]['faces']:
                    contact_sheet.paste(image, (x, y))
                    if x + first_image.width == contact_sheet.width:
                        x = 0
                        y = y + first_image.height 
                    else:
                        x = x + first_image.width

                display(contact_sheet)
